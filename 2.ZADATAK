#include <stdio.h>
#include <stdlib.h>
#include <time.h>

void swap(int *a, int *b) {
    int temp = *a;
    *a = *b;
    *b = temp;
}

void heapify(int *arr, int n, int i) {
    int largest = i;
    int l = 2 * i + 1;
    int r = 2 * i + 2;

    if (l < n && arr[l] > arr[largest])
        largest = l;

    if (r < n && arr[r] > arr[largest])
        largest = r;

    if (largest != i) {
        swap(&arr[i], &arr[largest]);
        heapify(arr, n, largest);
    }
}

void heap_sort(int *arr, int n) {
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(arr, n, i);

    for (int i = n - 1; i > 0; i--) {
        swap(&arr[0], &arr[i]);
        heapify(arr, i, 0);
    }
}

void bubble_sort(int *arr, int n) {
    for (int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (arr[j] > arr[j + 1])
                swap(&arr[j], &arr[j + 1]);
        }
    }
}

int main() {
    int N;
    printf("Unesite veličinu polja: ");
    scanf("%d", &N);

    int *array = (int *)malloc(N * sizeof(int));

    printf("Generiranje slučajnih brojeva...\n");
    srand(time(0));  // Inicijalizacija generatora slučajnih brojeva

    for (int i = 0; i < N; i++) {
        array[i] = rand() % 100;  // Generiranje brojeva od 0 do 99
    }

    // Heap sort
    clock_t start = clock();
    heap_sort(array, N);
    clock_t end = clock();
    double heapSortTime = ((double)(end - start) / CLOCKS_PER_SEC) * 1000;

    // Bubble sort
    start = clock();
    bubble_sort(array, N);
    end = clock();
    double bubbleSortTime = ((double)(end - start) / CLOCKS_PER_SEC) * 1000;

    printf("Vrijeme izvršenja Heap sorta: %.2f ms\n", heapSortTime);
    printf("Vrijeme izvršenja Bubble sorta: %.2f ms\n", bubbleSortTime);

    free(array);

    return 0;
}
